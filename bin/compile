#!/bin/bash

set -eu

BUILDPACK_DIR="$(dirname "$(dirname "$0")")"

# see https://devcenter.heroku.com/articles/buildpack-api#bin-compile
BUILD_DIR=${1:-}
CACHE_DIR=${2:-}

cd "$BUILD_DIR"
mkdir -p "$BUILD_DIR/bin"
mkdir -p "$CACHE_DIR"

JQ_VERSION="1.7.1"
TYPST_VERSION="0.13.1"
OXIPNG_VERSION="9.1.5"
FIRA_SANS_VERSION="4.202"
GIT_VERSION="2.50.0"

### Setup PATH for runtime

mkdir -p "$BUILD_DIR/.profile.d"
cat > "$BUILD_DIR/.profile.d/buildpack.sh" << 'EOF'
export PATH="/app/bin:$PATH"
EOF

### Install Node.js & pnpm and build frontend

JQ="$CACHE_DIR/jq-$JQ_VERSION"

if [ ! -x "$JQ" ]; then
    echo "-----> Installing jq v$JQ_VERSION"
    curl --proto '=https' --tlsv1.2 --location https://github.com/jqlang/jq/releases/download/jq-$JQ_VERSION/jq-linux-amd64 --output "$JQ"
    chmod +x "$JQ"
else
    echo "-----> jq v$JQ_VERSION already installed"
fi

### Install git CLI

GIT_DEB="$CACHE_DIR/git-$GIT_VERSION.deb"
GIT_BINARY="$BUILD_DIR/bin/git"

if [ ! -x "$GIT_BINARY" ]; then
    echo "-----> Installing git v$GIT_VERSION"
    if [ ! -f "$GIT_DEB" ]; then
        # Download git deb package from Ubuntu repositories
        curl --proto '=https' --tlsv1.2 --location "http://archive.ubuntu.com/ubuntu/pool/main/g/git/git_2.43.0-1ubuntu7.1_amd64.deb" --output "$GIT_DEB"
    fi

    # Extract git deb package
    dpkg-deb -x "$GIT_DEB" /tmp/git-extract

    # Copy git binaries to bin/
    cp /tmp/git-extract/usr/bin/git* "$BUILD_DIR/bin/" 2>/dev/null || true
    cp /tmp/git-extract/usr/bin/git "$BUILD_DIR/bin/"

    # Copy git libexec files (git subcommands)
    mkdir -p "$BUILD_DIR/libexec/git-core"
    cp -r /tmp/git-extract/usr/libexec/git-core/* "$BUILD_DIR/libexec/git-core/" 2>/dev/null || true

    # Set up git exec path in profile
    cat >> "$BUILD_DIR/.profile.d/buildpack.sh" << 'EOF'
export GIT_EXEC_PATH="/app/libexec/git-core"
EOF

    # Clean up
    rm -rf /tmp/git-extract
else
    echo "-----> git v$GIT_VERSION already installed"
fi

### Install typst CLI

TYPST_ARCHIVE="$CACHE_DIR/typst-$TYPST_VERSION.tar.xz"
TYPST_BINARY="$BUILD_DIR/bin/typst"

if [ ! -x "$TYPST_BINARY" ]; then
    echo "-----> Installing typst v$TYPST_VERSION"
    if [ ! -f "$TYPST_ARCHIVE" ]; then
        curl --proto '=https' --tlsv1.2 --location https://github.com/typst/typst/releases/download/v$TYPST_VERSION/typst-x86_64-unknown-linux-musl.tar.xz --output "$TYPST_ARCHIVE"
    fi
    tar -xf "$TYPST_ARCHIVE" -C /tmp
    cp /tmp/typst-x86_64-unknown-linux-musl/typst "$TYPST_BINARY"
    chmod +x "$TYPST_BINARY"
    rm -rf /tmp/typst-x86_64-unknown-linux-musl
else
    echo "-----> typst v$TYPST_VERSION already installed"
fi

### Install oxipng CLI

OXIPNG_ARCHIVE="$CACHE_DIR/oxipng-$OXIPNG_VERSION.tar.gz"
OXIPNG_BINARY="$BUILD_DIR/bin/oxipng"

if [ ! -x "$OXIPNG_BINARY" ]; then
    echo "-----> Installing oxipng v$OXIPNG_VERSION"
    if [ ! -f "$OXIPNG_ARCHIVE" ]; then
        curl --proto '=https' --tlsv1.2 --location https://github.com/oxipng/oxipng/releases/download/v$OXIPNG_VERSION/oxipng-$OXIPNG_VERSION-x86_64-unknown-linux-musl.tar.gz --output "$OXIPNG_ARCHIVE"
    fi
    tar -xf "$OXIPNG_ARCHIVE" -C /tmp
    cp /tmp/oxipng-$OXIPNG_VERSION-x86_64-unknown-linux-musl/oxipng "$OXIPNG_BINARY"
    chmod +x "$OXIPNG_BINARY"
    rm -rf /tmp/oxipng-$OXIPNG_VERSION-x86_64-unknown-linux-musl
else
    echo "-----> oxipng v$OXIPNG_VERSION already installed"
fi

### Install Fira Sans font

FIRA_SANS_DIR="$BUILD_DIR/.fonts"

if [ ! -d "$FIRA_SANS_DIR" ] || [ ! -f "$FIRA_SANS_DIR/FiraSans-Regular.ttf" ]; then
    echo "-----> Installing Fira Sans font v$FIRA_SANS_VERSION"
    mkdir -p "$FIRA_SANS_DIR"

    # Download Fira Sans font files
    FIRA_SANS_CACHE="$CACHE_DIR/fira-sans-$FIRA_SANS_VERSION"
    if [ ! -d "$FIRA_SANS_CACHE" ]; then
        mkdir -p "$FIRA_SANS_CACHE"
        # Download from Mozilla's official repository
        curl --proto '=https' --tlsv1.2 --location https://github.com/mozilla/Fira/archive/refs/tags/$FIRA_SANS_VERSION.zip --output "$FIRA_SANS_CACHE/fira-$FIRA_SANS_VERSION.zip"
        unzip -q "$FIRA_SANS_CACHE/fira-$FIRA_SANS_VERSION.zip" -d "$FIRA_SANS_CACHE"
    fi

    # Copy TTF files to user font directory
    cp "$FIRA_SANS_CACHE/Fira-$FIRA_SANS_VERSION/ttf/FiraSans"*.ttf "$FIRA_SANS_DIR/"

    # Create fontconfig directory and config
    mkdir -p "$BUILD_DIR/.config/fontconfig"
    cat > "$BUILD_DIR/.config/fontconfig/fonts.conf" << 'EOF'
<?xml version="1.0"?>
<!DOCTYPE fontconfig SYSTEM "fonts.dtd">
<fontconfig>
    <dir>~/.fonts</dir>
</fontconfig>
EOF
else
    echo "-----> Fira Sans font v$FIRA_SANS_VERSION already installed"
fi

echo "-----> Parsing pnpm version from \`package.json\` file"
PNPM_VERSION="$($JQ ".engines.pnpm" "package.json" --raw-output)"
export PNPM_VERSION

export PNPM_HOME="$CACHE_DIR/pnpm"

echo "-----> Installing pnpm v$PNPM_VERSION"
# see https://github.com/pnpm/get.pnpm.io/pull/35 for why the install script is vendored
ENV="$CACHE_DIR/.shrc" SHELL="$(which sh)" sh "$BUILDPACK_DIR/install_pnpm.sh"

export PATH="$PNPM_HOME:$PATH"

echo "-----> Parsing Node.js version from \`package.json\` file"
NODE_VERSION="$($JQ ".engines.node" "package.json" --raw-output)"

if [ ! -x "$PNPM_HOME/nodejs/$NODE_VERSION" ]; then
    echo "-----> Installing Node.js v$NODE_VERSION"
    pnpm env use --global "$NODE_VERSION"
else
    echo "-----> Node.js v$NODE_VERSION already installed"
fi

echo "-----> pnpm install"
pnpm install

echo "-----> pnpm run build"
pnpm run build

echo "-----> rm -rf node_modules"
rm -rf node_modules

### Install Rust and build backend

export RUSTUP_HOME="$CACHE_DIR/rustup"
export CARGO_HOME="$CACHE_DIR/cargo"
export CARGO_TARGET_DIR="$CACHE_DIR/target"

if [ ! -x "$CARGO_HOME/bin/rustup" ]; then
    echo "-----> Installing rustup"
    curl --proto '=https' --tlsv1.2 https://sh.rustup.rs | sh -s -- --default-toolchain none -y
else
    echo "-----> rustup already installed"
fi

export PATH="$CARGO_HOME/bin:$PATH"

echo "-----> rustup set profile minimal"
rustup set profile minimal

echo "-----> rustup toolchain install"
rustup toolchain install

echo "-----> cargo build"
cargo build --release

echo "-----> Copying compiled binaries into \`./target/release\` folder"
mkdir -p target/release
find "$CARGO_TARGET_DIR/release" -maxdepth 1 -type f -executable -exec cp -a -t target/release {} \;

echo "-----> Cleaning up cache folder"

# We can remove this completely, as cargo will recreate this from `cache`
rm -rf "$CARGO_HOME/registry/src"

# Remove dependencies that haven't been touched in the past 20 days
if [ -d "$CARGO_TARGET_DIR/release/.fingerprint" ]; then
  find "$CARGO_TARGET_DIR/release/.fingerprint" -maxdepth 1 -type d -mtime +20 -exec rm -rf {} \;
fi
if [ -d "$CARGO_TARGET_DIR/release/build" ]; then
  find "$CARGO_TARGET_DIR/release/build" -maxdepth 1 -type d -mtime +20 -exec rm -rf {} \;
fi
if [ -d "$CARGO_TARGET_DIR/release/deps" ]; then
  find "$CARGO_TARGET_DIR/release/deps" -maxdepth 1 -type d -mtime +20 -exec rm -rf {} \;
fi
